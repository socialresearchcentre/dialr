% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/phone.R
\name{dialr-phone}
\alias{dialr-phone}
\alias{phone}
\alias{phone_reparse}
\alias{is.phone}
\alias{print.phone}
\alias{format.phone}
\alias{as.character.phone}
\title{dialr phone class}
\usage{
phone(x, country)

phone_reparse(x)

is.phone(x)

\method{print}{phone}(x, n = 10, ...)

\method{format}{phone}(x, format = "NATIONAL", home = NULL,
  clean = TRUE, strict = FALSE, ...)

\method{as.character}{phone}(x, raw = TRUE, ...)
}
\arguments{
\item{x}{a character vector of phone numbers.}

\item{country}{a character vector of ISO country codes.}

\item{n}{number of elements to print}

\item{...}{additional arguments for specific methods.}

\item{format}{phone number format to use.}

\item{home}{ISO country code for home country. If provided, numbers will be formatted for dialing from the home country.}

\item{clean}{should non-numeric characters be removed? If `TRUE`, keeps numbers and leading `+`}

\item{strict}{should invalid phone numbers be removed? If `TRUE` invalid numbers are replaced with `NA`}

\item{raw}{if `TRUE`, the raw phone number is returned. Otherwise elements are cleaned with `format()`}
}
\description{
The phone class parses phone numbers and stores the java `Phonenumber` object
alongside the original raw text.
}
\examples{
  x <- phone(c(0, 0123, "0412 345 678", "61412987654", "03 9123 4567", "+12015550123"), "AU")
  is_parsed(x)
  is_valid(x)
  is_possible(x)
  get_region(x)
  get_type(x)
  format(x)
  format(x, home = "AU")
}
